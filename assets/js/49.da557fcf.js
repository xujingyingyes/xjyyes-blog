(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{230:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"教你几招算法笔试题的套路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#教你几招算法笔试题的套路"}},[t._v("#")]),t._v(" 教你几招算法笔试题的套路")]),t._v(" "),a("h2",{attrs:{id:"避实就虚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避实就虚"}},[t._v("#")]),t._v(" 避实就虚")]),t._v(" "),a("p",[t._v("大家也知道，大部分笔试题目都需要你自己来处理输入数据，然后让程序打印输出。判断的底层原理是，把你的程序的输出用 Linux 重定向符 "),a("code",[t._v(">")]),t._v(" 写到文件里面，然后比较你的输出和正确答案是否相同。")]),t._v(" "),a("p",[t._v("那么有的问题难点就变得形同虚设，我们可以偷工减料，举个简单的例子，假设题目给你输入一串空格分隔的字符，告诉你这代表一个单链表，请你吧这个单链表反转，并且强调一定要把输入的数字转换成单链表之后再反转。")]),t._v(" "),a("p",[t._v("那你要怎么做？真就自己定义一个 ListNode 单链表节点类，然后再写代码把输入转化成一个单链表，然后再用让人头晕的指针操作去老老实实反转单链表？")]),t._v(" "),a("p",[t._v("搞清楚我们是来 AC 题目的，不是来学习算法思维的。正确的做法是输入存到数组里，然后用双指针技巧几行代码反转，然后打印出来就完事了。")]),t._v(" "),a("p",[t._v("我就见过不少这种题目，比如题目说输入一个单链表，让我分组反转链表，而且还特别强调用递归实现，如果用数组进行反转几分钟就实现了。")]),t._v(" "),a("p",[t._v("还有扁平化嵌套数组，思路很巧妙，但是笔试中遇到输入一个形如 "),a("code",[t._v("[1, [4, [6]]]")]),t._v(" 的字符串，那直接用正则表达式把数字抽出来，就是一个扁平化的列表了。")]),t._v(" "),a("h2",{attrs:{id:"巧用随机数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#巧用随机数"}},[t._v("#")]),t._v(" 巧用随机数")]),t._v(" "),a("p",[t._v("再说一个鸡贼的技巧，注意那些输出为「二值」的题目，二值就是类似布尔值，或者 0 和 1 这种组合有限的。")]),t._v(" "),a("p",[t._v("比如说很多题目是这样的，巴拉巴拉说一大堆条件，然后问你输入的数据能不能打成这些条件，如果能输出 Yes，否则输出 No。")]),t._v(" "),a("p",[t._v("如果你会做当然最好，不会做怎么办呢？")]),t._v(" "),a("p",[t._v("首先这样提交：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Yes'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("看一下 case 通过率，假设为 60%，那么说明结果为 Yes 有 60% 的概率，所以可以这样写代码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yes"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"概率大师"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概率大师"}},[t._v("#")]),t._v(" 概率大师")]),t._v(" "),a("p",[t._v("说一个场景，如果笔试出现那种恶心人的单选，四个选项全都没见过，然后你蒙了一个 C。")]),t._v(" "),a("p",[t._v("假设突然你灵光一闪，确定 B 是错的，那么这时候你应该怎么做？")]),t._v(" "),a("p",[t._v("重新在 A 和 D 中间蒙一个啊哥哥！不重新蒙正确的概率为 1/4，重新蒙正确的概率为 3/8，白键的概率都不要吗？")]),t._v(" "),a("h2",{attrs:{id:"编程语言的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程语言的选择"}},[t._v("#")]),t._v(" 编程语言的选择")]),t._v(" "),a("p",[t._v("喜欢啥用啥，考察的是能否做对而不是用啥语言。")]),t._v(" "),a("h2",{attrs:{id:"解法代码分层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解法代码分层"}},[t._v("#")]),t._v(" 解法代码分层")]),t._v(" "),a("p",[t._v("代码分层应该算是一种比较好的习惯，可以增加写代码的速度和降低调试的难度，简单说就是不要把所有代码都堆在一起。")]),t._v(" "),a("h2",{attrs:{id:"考前复习策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#考前复习策略"}},[t._v("#")]),t._v(" 考前复习策略")]),t._v(" "),a("p",[t._v("考前就别和某一道算法题死磕，不划算。")]),t._v(" "),a("p",[t._v("应该尽可能多地看各种各样的题目，思考五分钟，想不出来解法的话直接看别人的答案。看懂思路就行了，甚至自己写一遍的必要都没有。")]),t._v(" "),a("p",[t._v("笔试的时候最怕就是没有思路，所以把各种题型都过目一下，起码心里不会慌，只要有思路，平均一道题二三十分钟搞定还是不难的。")])])}],!1,null,null,null);s.default=r.exports}}]);